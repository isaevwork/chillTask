#!/usr/bin/env node

// üöÄ ChillTask Status Checker (Node.js version)
// –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö

const { execSync } = require('child_process');
const http = require('http');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
function checkPort(port) {
  try {
    const result = execSync(`lsof -i :${port}`, { encoding: 'utf8', stdio: 'pipe' });
    return result.trim().length > 0;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint
function checkHttp(url) {
  return new Promise((resolve) => {
    const req = http.get(url, { timeout: 3000 }, (res) => {
      resolve(res.statusCode >= 200 && res.statusCode < 400);
    });

    req.on('error', () => resolve(false));
    req.on('timeout', () => {
      req.destroy();
      resolve(false);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function checkDocker(container) {
  try {
    const result = execSync(`docker ps --format "{{.Names}} {{.Status}}"`, { encoding: 'utf8' });
    return result.includes(container) && result.includes('Up');
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
function checkProcess(processName) {
  try {
    const result = execSync(`pgrep -f "${processName}"`, { encoding: 'utf8', stdio: 'pipe' });
    return result.trim().length > 0;
  } catch (error) {
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function checkStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ChillTask –ø—Ä–æ–µ–∫—Ç–∞...');
  console.log('================================================\n');

  let totalChecks = 0;
  let passedChecks = 0;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
  console.log(`${colors.blue}üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:${colors.reset}`);
  console.log('-------------------');

  const ports = [
    { port: 3000, service: 'Frontend (Vite)', url: 'http://localhost:3000' },
    { port: 3001, service: 'Backend (NestJS)', url: 'http://localhost:3001' },
    { port: 5432, service: 'PostgreSQL', url: 'localhost:5432' },
    { port: 6379, service: 'Redis', url: 'localhost:6379' },
    { port: 5555, service: 'Prisma Studio', url: 'http://localhost:5555' },
  ];

  for (const { port, service, url } of ports) {
    totalChecks++;
    if (checkPort(port)) {
      console.log(
        `‚úÖ ${colors.green}${service}${colors.reset} - –ü–æ—Ä—Ç ${port} (${colors.blue}${url}${colors.reset})`,
      );
      passedChecks++;
    } else {
      console.log(`‚ùå ${colors.red}${service}${colors.reset} - –ü–æ—Ä—Ç ${port} –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints
  console.log(`\n${colors.blue}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints:${colors.reset}`);
  console.log('---------------------------');

  const httpEndpoints = [
    { url: 'http://localhost:3000', service: 'Frontend' },
    { url: 'http://localhost:3001', service: 'Backend API' },
    { url: 'http://localhost:3001/api/docs', service: 'Swagger Docs' },
    { url: 'http://localhost:5555', service: 'Prisma Studio' },
  ];

  for (const { url, service } of httpEndpoints) {
    totalChecks++;
    const isAvailable = await checkHttp(url);
    if (isAvailable) {
      console.log(
        `‚úÖ ${colors.green}${service}${colors.reset} - HTTP –¥–æ—Å—Ç—É–ø–µ–Ω (${colors.blue}${url}${colors.reset})`,
      );
      passedChecks++;
    } else {
      console.log(
        `‚ùå ${colors.red}${service}${colors.reset} - HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${colors.blue}${url}${colors.reset})`,
      );
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  console.log(`\n${colors.blue}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${colors.reset}`);
  console.log('--------------------------------');

  const containers = [
    { name: 'chilltask-postgres', service: 'PostgreSQL' },
    { name: 'chilltask-redis', service: 'Redis' },
  ];

  for (const { name, service } of containers) {
    totalChecks++;
    if (checkDocker(name)) {
      console.log(`‚úÖ ${colors.green}${service}${colors.reset} - Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω`);
      passedChecks++;
    } else {
      console.log(`‚ùå ${colors.red}${service}${colors.reset} - Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  console.log(`\n${colors.blue}‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:${colors.reset}`);
  console.log('----------------------');

  const processes = [
    { name: 'vite', service: 'Vite –ø—Ä–æ—Ü–µ—Å—Å' },
    { name: 'nest', service: 'NestJS –ø—Ä–æ—Ü–µ—Å—Å' },
    { name: 'turbo', service: 'Turborepo –ø—Ä–æ—Ü–µ—Å—Å' },
  ];

  for (const { name, service } of processes) {
    totalChecks++;
    if (checkProcess(name)) {
      console.log(`‚úÖ ${colors.green}${service}${colors.reset} - –ó–∞–ø—É—â–µ–Ω`);
      passedChecks++;
    } else {
      console.log(`‚ùå ${colors.red}${service}${colors.reset} - –ù–µ –∑–∞–ø—É—â–µ–Ω`);
    }
  }

  // –°–≤–æ–¥–∫–∞
  console.log(`\n${colors.blue}üìä –°–≤–æ–¥–∫–∞:${colors.reset}`);
  console.log('==========');
  console.log(
    `–ü—Ä–æ–π–¥–µ–Ω–æ: ${colors.green}${passedChecks}${colors.reset} –∏–∑ ${colors.blue}${totalChecks}${colors.reset} –ø—Ä–æ–≤–µ—Ä–æ–∫`,
  );

  if (passedChecks === totalChecks) {
    console.log(`üéâ ${colors.green}–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!${colors.reset}`);
    process.exit(0);
  } else if (passedChecks > totalChecks / 2) {
    console.log(
      `‚ö†Ô∏è  ${colors.yellow}–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã${colors.reset}`,
    );
    process.exit(1);
  } else {
    console.log(`üí• ${colors.red}–ú–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!${colors.reset}`);
    process.exit(2);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkStatus().catch(console.error);
