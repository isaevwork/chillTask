import path from 'path';import type { Configuration as WebpackConfiguration } from 'webpack';import type { Configuration as DevServerConfiguration } from 'webpack-dev-server';import {buildPlugins} from "./config/buildPlugins";import {buildLoaders} from "./config/buildLoaders";import {Env} from "./config/types/types";import {buildDevServer} from "./config/buildDevServer";import {TsconfigPathsPlugin} from "tsconfig-paths-webpack-plugin";interface Configuration extends WebpackConfiguration {    devServer?: DevServerConfiguration;}export default (env: Env) => {        const mode = env.mode || "development";        const port = env.port || 3000;        const isDev = mode === "development";         const config: Configuration = {             // Режим сборки: development (для разработки) или production (продакшен)             mode: mode,             // Точка входа - главный файл приложения             entry: path.resolve(__dirname, 'src', 'index.tsx'),            // Настройки выходного файла             output: {                // Имя собранного бандла                filename: 'bundle.js',                // Папка для выходных файлов (абсолютный путь)                path: path.resolve(__dirname, 'dist'),                // Очищать папку dist перед каждой сборкой                clean: true            },            // Генерация source maps для отладки            devtool: isDev ? 'inline-source-map' : undefined,            // Настройки dev-сервера            devServer: isDev ? buildDevServer(port) : undefined,            // Настройки разрешения модулей            resolve: {                // Расширения файлов, которые Webpack будет пытаться обработать                extensions: ['.tsx', '.ts', '.js'],                plugins: [new TsconfigPathsPlugin()],            },            // Правила обработки файлов            module: {                rules: buildLoaders(isDev),            },            // Плагины            plugins: buildPlugins(isDev),        };    return config;}