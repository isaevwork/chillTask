import path from 'path';import type { Configuration as WebpackConfiguration } from 'webpack';import type { Configuration as DevServerConfiguration } from 'webpack-dev-server';import {buildPlugins} from "./config/buildPlugins";import {buildLoaders} from "./config/buildLoaders";interface Configuration extends WebpackConfiguration {    devServer?: DevServerConfiguration;}enum Mode {    DEV = "development",    PROD = "production",}const config: Configuration = {    // Режим сборки: development (для разработки) или production (продакшен)    mode: Mode.DEV,    // Точка входа - главный файл приложения    entry: path.resolve(__dirname, 'src', 'index.tsx'),    // Настройки выходного файла    output: {        // Имя собранного бандла        filename: 'bundle.js',        // Папка для выходных файлов (абсолютный путь)        path: path.resolve(__dirname, 'dist'),        // Очищать папку dist перед каждой сборкой        clean: true    },    // Генерация source maps для отладки    devtool: 'inline-source-map',    // Настройки dev-сервера    devServer: {        // Папка для статических файлов        static: './dist',        // Включить горячую перезагрузку (Hot Module Replacement)        hot: true,        // Порт для локального сервера        port: 3000    },    // Настройки разрешения модулей    resolve: {        // Расширения файлов, которые Webpack будет пытаться обработать        extensions: ['.tsx', '.ts', '.js']    },    // Правила обработки файлов    module: {        rules: buildLoaders(),    },    // Плагины    plugins: buildPlugins(),};export default config;