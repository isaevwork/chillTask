import path from 'path';import HtmlWebpackPlugin from 'html-webpack-plugin';import webpack from 'webpack';import type { Configuration as WebpackConfiguration } from 'webpack';import type { Configuration as DevServerConfiguration } from 'webpack-dev-server';interface Configuration extends WebpackConfiguration {    devServer?: DevServerConfiguration;}const config: Configuration = {    // Режим сборки: development (для разработки) или production (продакшен)    mode: 'development',    // Точка входа - главный файл приложения    entry: path.resolve(__dirname, 'src', 'index.tsx'),    // Настройки выходного файла    output: {        // Имя собранного бандла        filename: 'bundle.js',        // Папка для выходных файлов (абсолютный путь)        path: path.resolve(__dirname, 'dist'),        // Очищать папку dist перед каждой сборкой        clean: true    },    // Генерация source maps для отладки    devtool: 'inline-source-map',    // Настройки dev-сервера    devServer: {        // Папка для статических файлов        static: './dist',        // Включить горячую перезагрузку (Hot Module Replacement)        hot: true,        // Порт для локального сервера        port: 3000    },    // Настройки разрешения модулей    resolve: {        // Расширения файлов, которые Webpack будет пытаться обработать        extensions: ['.tsx', '.ts', '.js']    },    // Правила обработки файлов    module: {        rules: [            // Обработка TypeScript файлов            {                // Регулярное выражение для выбора файлов .ts и .tsx                test: /\.(ts|tsx)$/,                // Использовать ts-loader для компиляции TypeScript                use: 'ts-loader',                // Исключить папку node_modules                exclude: /node_modules/            },            // Обработка source maps из node_modules            {                enforce: 'pre', // Применять это правило до других                test: /\.js$/, // Для .js файлов                loader: 'source-map-loader' // Загрузчик source maps            }        ]    },    // Плагины    plugins: [        // Генерация HTML-файла на основе шаблона        new HtmlWebpackPlugin({            template: 'public/index.html' // Путь к HTML-шаблону        }),        new webpack.ProgressPlugin({            // Базовые настройки для детализации прогресса            activeModules: true,    // Показывает активные модули            entries: true,          // Отслеживает точки входа            modules: true,          // Показывает общее количество модулей            modulesCount: 3000,     // Порог для показа количества модулей            profile: false,         // Сбор профилировочных данных            dependencies: true,     // Отслеживает зависимости            dependenciesCount: 10000,        })    ]};export default config;